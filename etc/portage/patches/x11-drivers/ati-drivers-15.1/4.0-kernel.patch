--- common/lib/modules/fglrx/build_mod/firegl_public.c	2015-05-03 12:54:36.554212088 +0200
+++ firegl_public.c	2015-05-03 12:52:39.734757000 +0200
@@ -93,7 +93,7 @@
    and they use different config options. These options can only be enabled
    on x86_64 with newer 2.6 kernels (2.6.23 for intel, 2.6.26 for amd). 
 */
-#if defined(CONFIG_AMD_IOMMU) || defined(CONFIG_DMAR)
+#if defined(CONFIG_AMD_IOMMU) || defined(CONFIG_INTEL_IOMMU) || defined(CONFIG_DMAR)
     #define FIREGL_DMA_REMAPPING
 #endif
 
@@ -269,8 +269,12 @@
 #endif
 
 #ifdef MODULE_LICENSE
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,0)
+MODULE_LICENSE("GPL\0Proprietary. (C) 2002 - ATI Technologies, Starnberg, GERMANY");
+#else
 MODULE_LICENSE("Proprietary. (C) 2002 - ATI Technologies, Starnberg, GERMANY");
 #endif
+#endif
 #ifdef MODULE_DEVICE_TABLE
 MODULE_DEVICE_TABLE(pci, fglrx_pci_table);
 #endif
@@ -281,7 +285,7 @@
 const unsigned long KCL_SYSINFO_OsVersionCode   = LINUX_VERSION_CODE;
 
 // create global constants and hint symbols (i.e. for objdump checking)
-#ifdef CONFIG_MODVERSIONS
+#ifdef MODVERSIONS
 const unsigned long KCL_SYSINFO_BinaryModuleSupport = 1;
 const char BUILD_KERNEL_HAS_MODVERSIONS_SET;
 #else
@@ -289,7 +293,7 @@
 const char BUILD_KERNEL_HAS_MODVERSIONS_CLEARED;
 #endif
 
-#ifdef CONFIG_SMP
+#ifdef __SMP__
 const unsigned long KCL_SYSINFO_SmpSupport = 1;
 const char BUILD_KERNEL_HAS_SMP_SET;
 #else
@@ -535,8 +539,6 @@
 }
 
 #else
-#include <linux/seq_file.h>
-
 #define READ_PROC_WRAP(func)                                            \
 static int func##_wrap(struct seq_file *m, void* data)                  \
 {                                                                       \
@@ -2944,8 +2946,8 @@
  * kernel <  2.6.27, on_each_cpu has 4 parameters.
  * kernel >= 2.6.27, on_each_cpu has 3 parameters (removed the "retry" parameter)
  */
-#if ( defined(__x86_64__) && (defined(CONFIG_SMP) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25))) || \
-    (!defined(__x86_64__) && (defined(CONFIG_SMP) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,29)))
+#if ( defined(__x86_64__) && (defined(__SMP__) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25))) || \
+    (!defined(__x86_64__) && (defined(__SMP__) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,29)))
 #   if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,27))
         on_each_cpu(kcl_flush_tlb_one, &va, 1, 1);
 #   else
@@ -2984,8 +2986,8 @@
 
     if (ret)
     {
-#if ( defined(__x86_64__) && (defined(CONFIG_SMP) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25))) || \
-    (!defined(__x86_64__) && (defined(CONFIG_SMP) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,29)))
+#if ( defined(__x86_64__) && (defined(__SMP__) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25))) || \
+    (!defined(__x86_64__) && (defined(__SMP__) || defined(CONFIG_SMP)) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,29)))
         //EPR#300662 On HP Z800 NUMA platform, SpecViewperf10 losses up to 50%
         //performance if flush TLB for all CPU. If limit flush TLB on current cpu,
         //The overall performance can increase back to normal level.
@@ -3310,7 +3312,7 @@
 
 /*****************************************************************************/
 
-#ifdef CONFIG_SMP
+#ifdef __SMP__
 static atomic_t cpus_waiting;
 
 static void deferred_flush(void* contextp)
@@ -3326,7 +3328,7 @@
 	while (atomic_read(&cpus_waiting) > 0)
 		barrier();
 }
-#endif /* CONFIG_SMP */
+#endif /* __SMP__ */
 
 /** \brief Run a function on all other CPUs.
  * \param func The function to run.
@@ -3342,7 +3344,7 @@
 
 int ATI_API_CALL KCL_MEM_FlushCpuCaches(void)
 {
-#ifdef CONFIG_SMP
+#ifdef __SMP__
     /* write back invalidate all other CPUs (exported by kernel) */
 	if (KCL_SmpCallFunction(deferred_flush, NULL, 1, 0) != 0)
 		panic("timed out waiting for the other CPUs!\n");
@@ -3358,7 +3360,7 @@
 
 	while (atomic_read(&cpus_waiting) > 0)
 		barrier();
-#else /* !CONFIG_SMP */
+#else /* !__SMP__ */
 #if defined(__i386__) || defined(__x86_64__)
 	asm volatile ("wbinvd":::"memory");
 #elif defined(__alpha__) || defined(__sparc__)
@@ -3366,7 +3368,7 @@
 #else
 #error "Please define flush_cache for your architecture."
 #endif
-#endif /* !CONFIG_SMP */
+#endif /* !__SMP__ */
 
     return 0;
 }
@@ -4498,8 +4500,13 @@
 
     if (cpu_has_pge)
     {
-        cr4 = read_cr4();
-        write_cr4(cr4 & ~X86_CR4_PGE);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
+	cr4 = read_cr4();
+	write_cr4(cr4 & ~X86_CR4_PGE);
+#else
+	cr4 = __read_cr4();
+	__write_cr4(cr4 & ~X86_CR4_PGE);
+#endif
     }
      __flush_tlb();
 
@@ -4512,7 +4519,11 @@
     write_cr0(cr0 & 0xbfffffff);
     if (cpu_has_pge)
     {
-        write_cr4(cr4);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
+	write_cr4(cr4);
+#else
+	__write_cr4(cr4);
+#endif
     }
     local_irq_restore(flags);
 
@@ -4539,8 +4550,13 @@
 
     if (cpu_has_pge)
     {
-        cr4 = read_cr4();
-        write_cr4(cr4 & ~X86_CR4_PGE);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
+	cr4 = read_cr4();
+	write_cr4(cr4 & ~X86_CR4_PGE);
+#else
+	cr4 = __read_cr4();
+	__write_cr4(cr4 & ~X86_CR4_PGE);
+#endif
     }
      __flush_tlb();
   
@@ -4552,7 +4568,11 @@
     write_cr0(cr0 & 0xbfffffff);
     if (cpu_has_pge)
     {
-        write_cr4(cr4);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
+	write_cr4(cr4);
+#else
+	__write_cr4(cr4);
+#endif
     }
     local_irq_restore(flags);
 
@@ -6422,7 +6442,7 @@
     generate_random_uuid((char *)buf);
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0) && LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
 static int KCL_fpu_save_init(struct task_struct *tsk)
 {
    struct fpu *fpu = &tsk->thread.fpu;
@@ -6453,7 +6473,7 @@
  */
 void ATI_API_CALL KCL_fpu_begin(void)
 {
-#if defined(CONFIG_X86_64) || LINUX_VERSION_CODE >= KERNEL_VERSION(3,17,0)
+#ifdef CONFIG_X86_64
     kernel_fpu_begin();
 #else
 #ifdef TS_USEDFPU
--- common/lib/modules/fglrx/build_mod/kcl_str.c	2015-05-03 12:54:36.558212000 +0200
+++ kcl_str.c	2015-05-03 12:52:07.408461000 +0200
@@ -169,7 +169,11 @@
                                   const char* s2,
                                   KCL_TYPE_SizeSigned count)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
     return strnicmp(s1, s2, count);
+#else
+    return strncasecmp(s1, s2, count);
+#endif
 }
 
 /** \brief Locate character in string
--- common/lib/modules/fglrx/build_mod/kcl_acpi.c	2015-05-03 12:54:36.556212044 +0200
+++ kcl_acpi.c	2015-05-03 12:52:22.625130000 +0200
@@ -829,6 +829,7 @@
     return retHandle;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
 static acpi_status KCL_ACPI_Slot_No_Hotplug(KCL_ACPI_DevHandle handle, u32 lvl, void *data, void **rv)
 {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,7) && LINUX_VERSION_CODE < KERNEL_VERSION(3,17,0)
@@ -848,6 +849,7 @@
 #endif
    return 0;
 }
+#endif
 
 void ATI_API_CALL KCL_ACPI_No_Hotplug(void* dev)
 {
